package net.rhizomik.rhizomer.model;

import com.hp.hpl.jena.query.Dataset;
import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.query.QueryExecution;
import com.hp.hpl.jena.query.QueryExecutionFactory;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.update.UpdateAction;
import com.hp.hpl.jena.update.UpdateRequest;
import org.apache.jena.riot.RDFDataMgr;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.*;

/**
 * Created by http://rhizomik.net/~roberto/
 */
public class ServerMockFactory {
    private static final Logger logger = LoggerFactory.getLogger(ServerMockFactory.class);

    public static Server serverMockFactory(Dataset dataset) {
        Server serverMock = mock(Server.class);
        when(serverMock.querySelect(isA(Query.class), anyList(), anyList()))
                .thenAnswer(invocationOnMock -> {
                    Query query = (Query) invocationOnMock.getArguments()[0];
                    List<String> graphs = (List<String>) invocationOnMock.getArguments()[1];
                    Model queryDataset = ModelFactory.createDefaultModel();
                    graphs.forEach(graph -> queryDataset.add(dataset.getNamedModel(graph)));
                    graphs.forEach(query::addGraphURI);
                    logger.info("Sending to {} query: \n{}", "mockServer", query);
                    QueryExecution qexec = QueryExecutionFactory.create(query, queryDataset);
                    return qexec.execSelect();
                });
        when(serverMock.queryConstruct(isA(Query.class), anyList()))
                .thenAnswer(invocationOnMock -> {
                    Query query = (Query) invocationOnMock.getArguments()[0];
                    List<String> graphs = (List<String>) invocationOnMock.getArguments()[1];
                    Model queryDataset = ModelFactory.createDefaultModel();
                    graphs.forEach(graph -> queryDataset.add(dataset.getNamedModel(graph)));
                    graphs.forEach(query::addGraphURI);
                    logger.info("Sending to {} query: \n{}", "mockServer", query);
                    QueryExecution qexec = QueryExecutionFactory.create(query, queryDataset);
                    return qexec.execConstruct();
                });
        doAnswer(invocationOnMock -> {
            UpdateRequest update = (UpdateRequest) invocationOnMock.getArguments()[0];
            logger.debug("Sending to {} query: \n{}", "mockServer", update.toString());
            UpdateAction.execute(update, dataset);
            return null;
        }).when(serverMock).queryUpdate(any(UpdateRequest.class));
        doAnswer(invocationOnMock -> {
            String graph = (String) invocationOnMock.getArguments()[0];
            String uri = (String) invocationOnMock.getArguments()[1];
            Model model = RDFDataMgr.loadModel(uri);
            serverMock.loadModel(graph, model);
            return null;
        }).when(serverMock).loadOntology(anyString(), anyString());
        doAnswer(invocationOnMock -> {
            String graph = (String) invocationOnMock.getArguments()[0];
            Model model = (Model) invocationOnMock.getArguments()[1];
            if (dataset.containsNamedModel(graph))
                model.add(dataset.getNamedModel(graph));
            dataset.addNamedModel(graph, model);
            return null;
        }).when(serverMock).loadModel(anyString(), any(Model.class));

        return serverMock;
    }
}
